name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run ruff format check
      run: ruff format --check .

    - name: Run ruff lint
      run: ruff check .

    - name: Run mypy
      run: mypy mlx_websockets --ignore-missing-imports

  test:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.12']  # Test min and max supported versions

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run fast unit tests
      run: |
        pytest tests/ -v --tb=short -m "not slow" \
          --ignore=tests/test_end_to_end.py \
          --cov=mlx_websockets --cov-report=xml --cov-report=term

    - name: Run slow tests
      if: matrix.python-version == '3.12' || github.ref == 'refs/heads/main'  # Run on latest Python or main branch
      run: |
        pytest tests/ -v --tb=short -m "slow" --no-cov

    - name: Run integration tests
      if: matrix.python-version == '3.12' || github.ref == 'refs/heads/main'  # Run on latest Python or main branch
      run: |
        pytest tests/test_integration.py tests/test_end_to_end.py -v --tb=short --no-cov \
          -k "not test_latency_distribution"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'  # Upload coverage from latest Python
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  conventional-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Check PR title follows Conventional Commits
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          fix
          feat
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert
        requireScope: false
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          The subject "{subject}" found in the pull request title "{title}"
          didn't match the configured pattern. Please ensure that the subject
          doesn't start with an uppercase character.

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution
      run: python -m build

    - name: Check distribution
      run: |
        twine check dist/*
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-install:
    needs: build
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.12']  # Test install only on latest Python

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install from wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Test CLI availability
      run: |
        mlx --help
        mlx status

    - name: Test module execution
      run: |
        python -m mlx_websockets --help

    - name: Test imports
      run: |
        python -c "import mlx_websockets; print(mlx_websockets.__version__)"
